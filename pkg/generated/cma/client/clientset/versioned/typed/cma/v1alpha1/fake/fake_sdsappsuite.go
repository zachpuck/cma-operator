/*
Copyright 2018 Samsung SDS Cloud Native Computing Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/samsung-cnct/cma-operator/pkg/apis/cma/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSDSAppSuites implements SDSAppSuiteInterface
type FakeSDSAppSuites struct {
	Fake *FakeCmaV1alpha1
	ns   string
}

var sdsappsuitesResource = schema.GroupVersionResource{Group: "cma.sds.samsung.com", Version: "v1alpha1", Resource: "sdsappsuites"}

var sdsappsuitesKind = schema.GroupVersionKind{Group: "cma.sds.samsung.com", Version: "v1alpha1", Kind: "SDSAppSuite"}

// Get takes name of the sDSAppSuite, and returns the corresponding sDSAppSuite object, and an error if there is any.
func (c *FakeSDSAppSuites) Get(name string, options v1.GetOptions) (result *v1alpha1.SDSAppSuite, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(sdsappsuitesResource, c.ns, name), &v1alpha1.SDSAppSuite{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SDSAppSuite), err
}

// List takes label and field selectors, and returns the list of SDSAppSuites that match those selectors.
func (c *FakeSDSAppSuites) List(opts v1.ListOptions) (result *v1alpha1.SDSAppSuiteList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(sdsappsuitesResource, sdsappsuitesKind, c.ns, opts), &v1alpha1.SDSAppSuiteList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.SDSAppSuiteList{}
	for _, item := range obj.(*v1alpha1.SDSAppSuiteList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sDSAppSuites.
func (c *FakeSDSAppSuites) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(sdsappsuitesResource, c.ns, opts))

}

// Create takes the representation of a sDSAppSuite and creates it.  Returns the server's representation of the sDSAppSuite, and an error, if there is any.
func (c *FakeSDSAppSuites) Create(sDSAppSuite *v1alpha1.SDSAppSuite) (result *v1alpha1.SDSAppSuite, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(sdsappsuitesResource, c.ns, sDSAppSuite), &v1alpha1.SDSAppSuite{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SDSAppSuite), err
}

// Update takes the representation of a sDSAppSuite and updates it. Returns the server's representation of the sDSAppSuite, and an error, if there is any.
func (c *FakeSDSAppSuites) Update(sDSAppSuite *v1alpha1.SDSAppSuite) (result *v1alpha1.SDSAppSuite, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(sdsappsuitesResource, c.ns, sDSAppSuite), &v1alpha1.SDSAppSuite{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SDSAppSuite), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSDSAppSuites) UpdateStatus(sDSAppSuite *v1alpha1.SDSAppSuite) (*v1alpha1.SDSAppSuite, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(sdsappsuitesResource, "status", c.ns, sDSAppSuite), &v1alpha1.SDSAppSuite{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SDSAppSuite), err
}

// Delete takes name of the sDSAppSuite and deletes it. Returns an error if one occurs.
func (c *FakeSDSAppSuites) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(sdsappsuitesResource, c.ns, name), &v1alpha1.SDSAppSuite{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSDSAppSuites) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(sdsappsuitesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.SDSAppSuiteList{})
	return err
}

// Patch applies the patch and returns the patched sDSAppSuite.
func (c *FakeSDSAppSuites) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.SDSAppSuite, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sdsappsuitesResource, c.ns, name, data, subresources...), &v1alpha1.SDSAppSuite{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.SDSAppSuite), err
}
